{
  "name": "plantuml",
  "scopeName": "source.plantuml",
  "patterns": [
    {
      "comment": "diagram block",
      "name": "diagram.source.plantuml",
      "begin": "(?i)^\\s*(@start[a-z]+)((\\s+)(.+?))?\\s*$",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.diagram.source.plantuml"
        },
        "5": {
          "name": "entity.name.function.diagram.source.plantuml"
        }
      },
      "end": "(?i)^\\s*(@end[a-z]+)\\s*$",
      "endCaptures": {
        "1": {
          "name": "keyword.control.diagram.source.plantuml"
        }
      },
      "patterns": [
        {
          "include": "#Quoted"
        },
        {
          "include": "#Comment"
        },
        {
          "include": "#Style"
        },
        {
          "include": "#Class"
        },
        {
          "include": "#Object"
        },
        {
          "include": "#Activity"
        },
        {
          "include": "#Sequence"
        },
        {
          "include": "#State"
        },
        {
          "include": "#Keywords"
        },
        {
          "include": "#General"
        }
      ]
    },
    {
      "include": "#Quoted"
    },
    {
      "include": "#Comment"
    },
    {
      "include": "#Style"
    },
    {
      "include": "#Class"
    },
    {
      "include": "#Object"
    },
    {
      "include": "#Activity"
    },
    {
      "include": "#Sequence"
    },
    {
      "include": "#State"
    },
    {
      "include": "#Keywords"
    },
    {
      "include": "#General"
    }
  ],
  "repository": {
    "Quoted": {
      "patterns": [
        {
          "comment": "quoted definitions",
          "name": "support.variable.definitions.source.plantuml",
          "begin": "(?i)^\\s*(:)",
          "end": "(?i)(:)|[\\];|<>/}]?\\s*$"
        },
        {
          "comment": "double quoted",
          "name": "string.quoted.double.source.plantuml",
          "begin": "\"",
          "end": "\""
        }
      ]
    },
    "Comment": {
      "patterns": [
        {
          "comment": "comment line",
          "name": "comment.line.comment.source.plantuml",
          "begin": "(?i)^\\s*(')",
          "end": "(?i)\\n"
        },
        {
          "comment": "comment block",
          "name": "comment.block.source.plantuml",
          "begin": "(?i)^\\s*(/')",
          "end": "(?i)('/)\\s*$"
        }
      ]
    },
    "Style": {
      "patterns": [
        {
          "comment": "inline style",
          "match": "(?i)^\\s*(skinparam)\\s+(\\w+)(<<\\s*.+?\\s*>>)?\\s+([^\\{\\}]+?)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.skinparam.source.plantuml"
            },
            "2": {
              "name": "keyword.other.skinparam.keyword.source.plantuml"
            },
            "3": {
              "name": "constant.numeric.skinparam.keyword.source.plantuml"
            },
            "4": {
              "name": "string.quoted.double.skinparam.value.source.plantuml"
            }
          }
        },
        {
          "comment": "style block",
          "begin": "(?i)^\\s*(?:(skinparam)(?:\\s+(\\w+?)(<<\\s*.+?\\s*>>)?)?|(\\w+)(<<\\s*.+?\\s*>>)?)\\s*\\{\\s*$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.skinparam.source.plantuml"
            },
            "2": {
              "name": "keyword.other.skinparam.keyword.source.plantuml"
            },
            "3": {
              "name": "constant.numeric.skinparam.keyword.source.plantuml"
            },
            "4": {
              "name": "keyword.other.skinparam.keyword.source.plantuml"
            },
            "5": {
              "name": "constant.numeric.skinparam.keyword.source.plantuml"
            }
          },
          "end": "^\\s*(?<!\\\\)\\}\\s*$",
          "patterns": [
            {
              "comment": "inline style",
              "match": "(?i)^\\s*(\\w+)(<<\\s*.+?\\s*>>)?\\s+([^\\{\\}]+?)\\s*$",
              "captures": {
                "1": {
                  "name": "keyword.other.skinparam.keyword.source.plantuml"
                },
                "2": {
                  "name": "constant.numeric.skinparam.keyword.source.plantuml"
                },
                "3": {
                  "name": "string.quoted.double.skinparam.value.source.plantuml"
                }
              }
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "Keywords": {
      "patterns": [
        {
          "comment": "line begin keywords",
          "name": "keyword.other.linebegin.source.plantuml",
          "match": "(?i)^\\s*(usecase|actor|object|participant|boundary|control|entity|database|create|component|interface|package|node|folder|frame|cloud|annotation|enum|abstract|class|abstract\\s+class|state|autonumber(\\s+stop|resume)?|activate|deactivate|return|destroy|newpage|alt|else|opt|loop|par|break|critical|group|box|rectangle|namespace|partition)\\b"
        },
        {
          "comment": "whole line keywords",
          "name": "keyword.other.wholeline.source.plantuml",
          "match": "(?i)^\\s*(split( again)?|endif|repeat|start|stop|end|end\\s+fork|end\\s+split|fork( again)?|detach|end\\s+box|top\\s+to\\s+bottom\\s+direction|left\\s+to\\s+right\\s+direction)\\s*$"
        },
        {
          "comment": "other keywords",
          "name": "keyword.other.other.source.plantuml",
          "match": "(?i)\\b(as|{(static|abstract)\\})\\b"
        }
      ]
    },
    "General": {
      "patterns": [
        {
          "comment": "multi-line title, enables ctrl+r jump list.",
          "begin": "(?i)^\\s*(title)\\s*$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.title.source.plantuml"
            }
          },
          "end": "(?i)^\\s*\\b(end\\s+title)\\b",
          "endCaptures": {
            "1": {
              "name": "keyword.other.title.source.plantuml"
            }
          },
          "patterns": [
            {
              "match": "(?i)^\\s*(.+?)\\s*$",
              "captures": {
                "1": {
                  "name": "entity.name.function.title.source.plantuml"
                }
              }
            }
          ]
        },
        {
          "comment": "title, enables ctrl+r jump list.",
          "match": "(?i)^\\s*(title)\\s+(.+?)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.title.source.plantuml"
            },
            "2": {
              "name": "entity.name.function.title.source.plantuml"
            }
          }
        },
        {
          "comment": "scale 1.5, scale 2/3, scale 200 width, scale 200 height, scale 200*100, scale max 300*200",
          "name": "keyword.other.scale.source.plantuml",
          "match": "(?i)^\\s*(scale)\\s+((max)\\s+)?(\\d+(\\.?\\d+)?)\\s*((([\\*/])\\s*(\\d+\\.?(\\.?\\d+)?))|(width|height))?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.scale.source.plantuml"
            },
            "3": {
              "name": "keyword.other.scale.source.plantuml"
            },
            "4": {
              "name": "constant.numeric.scale.source.plantuml"
            },
            "8": {
              "name": "keyword.operator.scale.source.plantuml"
            },
            "9": {
              "name": "constant.numeric.scale.source.plantuml"
            },
            "11": {
              "name": "keyword.other.scale.source.plantuml"
            }
          }
        },
        {
          "comment": "inline caption",
          "match": "(?i)^\\s*(caption)\\s+(.+)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.note.source.plantuml"
            },
            "2": {
              "name": "constant.numeric.caption.source.plantuml"
            }
          }
        },
        {
          "comment": "inline note",
          "match": "(?i)^\\s*(note\\s(left|right))\\s*:\\s*(.+)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.note.source.plantuml"
            },
            "3": {
              "name": "meta.comment.note.source.plantuml"
            }
          }
        },
        {
          "comment": "multiple note",
          "begin": "(?i)^\\s*(note\\s(left|right))\\s*$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.note.source.plantuml"
            }
          },
          "end": "(?i)^\\s*(end\\s*note)",
          "endCaptures": {
            "1": {
              "name": "keyword.other.note.source.plantuml"
            }
          },
          "patterns": [
            {
              "name": "meta.comment.multiple.note.source.plantuml",
              "match": ".+?"
            }
          ]
        },
        {
          "comment": "inline note of over",
          "match": "(?i)^\\s*([rh]?note)(?:\\s+(right|left|top|bottom))?\\s+(?:(?:(of|over)\\s*(?:[^\\s\\w\\d]([\\w\\s]+)[^\\s\\w\\d]|(?:(\".+?\"|\\w+)(?:,\\s*(\".+?\"|\\w+))*)))|(on\\s+link))\\s*(#\\w+)?\\s*:\\s*(.+)$",
          "captures": {
            "1": {
              "name": "keyword.other.noteof.source.plantuml"
            },
            "2": {
              "name": "constant.numeric.noteof.source.plantuml"
            },
            "3": {
              "name": "keyword.other.noteof.source.plantuml"
            },
            "4": {
              "name": "support.variable.noteof.source.plantuml"
            },
            "5": {
              "name": "support.variable.noteof.source.plantuml"
            },
            "6": {
              "name": "support.variable.noteof.source.plantuml"
            },
            "7": {
              "name": "keyword.other.noteof.source.plantuml"
            },
            "8": {
              "name": "constant.numeric.noteof.source.plantuml"
            },
            "9": {
              "name": "meta.comment.noteof.source.plantuml"
            }
          }
        },
        {
          "comment": "multi-line note of over",
          "begin": "(?i)^\\s*([rh]?note)(?:\\s+(right|left|top|bottom))?\\s+(?:(?:(of|over)\\s*(?:[^\\s\\w\\d]([\\w\\s]+)[^\\s\\w\\d]|(?:(\".+?\"|\\w+)(?:,\\s*(\".+?\"|\\w+))*)))|(on\\s+link))\\s*(#\\w+)?\\s*$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.noteof.source.plantuml"
            },
            "2": {
              "name": "constant.numeric.noteof.source.plantuml"
            },
            "3": {
              "name": "keyword.other.noteof.source.plantuml"
            },
            "4": {
              "name": "support.variable.noteof.source.plantuml"
            },
            "5": {
              "name": "support.variable.noteof.source.plantuml"
            },
            "6": {
              "name": "support.variable.noteof.source.plantuml"
            },
            "7": {
              "name": "keyword.other.noteof.source.plantuml"
            },
            "8": {
              "name": "constant.numeric.noteof.source.plantuml"
            }
          },
          "end": "(?i)^\\s*(end\\s*[rh]?note)",
          "endCaptures": {
            "1": {
              "name": "keyword.other.multline.noteof.source.plantuml"
            }
          },
          "patterns": [
            {
              "name": "meta.comment.multline.noteof.source.plantuml",
              "match": ".+?"
            }
          ]
        },
        {
          "comment": "float note, note as",
          "match": "(?i)^\\s*(note)\\s+(\".+?\")\\s+(as)\\s+([\\w\\d]+)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.noteas.source.plantuml"
            },
            "2": {
              "name": "meta.comment.noteas.source.plantuml"
            },
            "3": {
              "name": "keyword.other.noteas.source.plantuml"
            },
            "4": {
              "name": "support.variable.noteas.source.plantuml"
            }
          }
        },
        {
          "comment": "multi-line header, legend, footer",
          "begin": "(?i)^\\s*(?:(center|left|right)\\s+)?(header|legend|footer)\\s*\\n",
          "beginCaptures": {
            "1": {
              "name": "constant.numeric.header_legend_footer.source.plantuml"
            },
            "2": {
              "name": "keyword.other.header_legend_footer.source.plantuml"
            }
          },
          "end": "(?i)^\\s*(end\\s?(header|legend|footer))",
          "endCaptures": {
            "1": {
              "name": "keyword.other.header_legend_footer.source.plantuml"
            }
          },
          "patterns": [
            {
              "name": "meta.comment.header_legend_footer.source.plantuml",
              "match": ".+?"
            }
          ]
        },
        {
          "comment": "header, legend, footer",
          "match": "(?i)^\\s*(?:(center|left|right)\\s+)?(header|legend|footer)\\s+(.+?)\\s*$",
          "captures": {
            "1": {
              "name": "constant.numeric.header_legend_footer.source.plantuml"
            },
            "2": {
              "name": "keyword.other.header_legend_footer.source.plantuml"
            },
            "3": {
              "name": "meta.comment.header_legend_footer.source.plantuml"
            }
          }
        },
        {
          "comment": "Preprocessings",
          "name": "support.class.preprocessings.source.plantuml",
          "match": "(?i)(!includesub|!include|!enddefinelong|!definelong|!define|!startsub|!endsub|!ifdef|!else|!endif|!ifndef)"
        },
        {
          "comment": "links",
          "begin": "(?i)((?:(?:(?:\\s+[ox]|[+*])?(?:<<|<\\|?|\\\\\\\\|\\\\|//|\\}|\\^|#|0|0\\))?)(?=[-.~=]))[-.~=]+(\\[(?:\\#(?:[0-9a-f]{6}|[0-9a-f]{3}|\\w+)(?:[-\\\\/](?:[0-9a-f]{6}|[0-9a-f]{3}|\\w+))?\\b)\\])?(?:(left|right|up|down)(?:[-.~=]))?[-.]*(?:(?:>>|\\|?>|\\\\\\\\|\\\\|//|\\{|\\^|#|0|\\(0)?(?:[ox]\\s+|[+*])?))",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.note.source.plantuml"
            },
            "2": {
              "name": "constant.numeric.link.color.source.plantuml"
            },
            "3": {
              "name": "constant.language.link.source.plantuml"
            }
          },
          "end": "$",
          "patterns": [
            {
              "include": "#General"
            },
            {
              "comment": "actor and link message",
              "match": "(?i):([^:]+):\\s*:(.+)$",
              "captures": {
                "1": {
                  "name": "support.variable.actor.link.source.plantuml"
                },
                "2": {
                  "name": "meta.comment.message.link.source.plantuml"
                }
              }
            },
            {
              "comment": "link message",
              "match": "(?i):(.+)$",
              "captures": {
                "1": {
                  "name": "meta.comment.message.link.source.plantuml"
                }
              }
            }
          ]
        },
        {
          "comment": "all color names",
          "match": "(?i)#(?:[0-9a-f]{6}|[0-9a-f]{3}|\\w+)",
          "name": "constant.numeric.colors.source.plantuml"
        },
        {
          "comment": "Variables",
          "name": "support.variable.source.plantuml",
          "match": "\\b[\\w_]+"
        }
      ]
    },
    "Activity": {
      "patterns": [
        {
          "comment": "if",
          "match": "(?i)^\\s*(else *if|if)\\s?\\((.+?)\\)\\s?(then)(\\s?\\((.+?)\\))?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.activity.if.source.plantuml"
            },
            "2": {
              "name": "string.quoted.double.activity.if.source.plantuml"
            },
            "3": {
              "name": "keyword.other.activity.if.source.plantuml"
            },
            "5": {
              "name": "meta.comment.activity.if.source.plantuml"
            }
          }
        },
        {
          "comment": "else",
          "match": "(?i)^\\s*(else)(\\s?\\((.+?)\\))?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.activity.else.source.plantuml"
            },
            "3": {
              "name": "meta.comment.activity.else.source.plantuml"
            }
          }
        },
        {
          "comment": "while is, repeat while is",
          "match": "(?i)^\\s*(repeat\\s+)?(while)\\s*\\((.+?)\\)(\\s*(is)(\\s*\\((.+?)\\))?)?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.activity.while.source.plantuml"
            },
            "2": {
              "name": "keyword.other.activity.while.source.plantuml"
            },
            "3": {
              "name": "string.quoted.double.activity.while.source.plantuml"
            },
            "5": {
              "name": "keyword.other.activity.while.source.plantuml"
            },
            "7": {
              "name": "meta.comment.activity.while.source.plantuml"
            }
          }
        },
        {
          "comment": "endwhile",
          "match": "(?i)^\\s*(end)\\s?(while)(\\s*\\((.+?)\\))?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.activity.endwhile.source.plantuml"
            },
            "2": {
              "name": "keyword.other.activity.endwhile.source.plantuml"
            },
            "4": {
              "name": "meta.comment.activity.endwhile.source.plantuml"
            }
          }
        }
      ]
    },
    "Sequence": {
      "patterns": [
        {
          "comment": "divider",
          "match": "(?i)^\\s*(={2,})\\s*(.+?)\\s*(={2,})\\s*$",
          "captures": {
            "1": {
              "name": "keyword.operator.sequence.divider.source.plantuml"
            },
            "2": {
              "name": "string.quoted.double.sequence.divider.source.plantuml"
            },
            "3": {
              "name": "keyword.operator.sequence.divider.source.plantuml"
            }
          }
        },
        {
          "comment": "...",
          "match": "(?i)^\\s*(\\.{3,})\\s*$",
          "captures": {
            "1": {
              "name": "keyword.operator.sequence.omission.source.plantuml"
            }
          }
        },
        {
          "comment": "inline ref",
          "match": "(?i)^\\s*(ref\\s+over)\\s+(.+?)\\s*:\\s*(.+)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.sequence.ref.source.plantuml"
            },
            "2": {
              "name": "support.variable.sequence.ref.source.plantuml"
            },
            "3": {
              "name": "meta.comment.sequence.ref.source.plantuml"
            }
          }
        },
        {
          "comment": "multi-line ref",
          "begin": "(?i)^\\s*(ref\\s+over)\\s+(.+?)\\s*$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.sequence.ref.source.plantuml"
            },
            "2": {
              "name": "support.variable.sequence.ref.source.plantuml"
            }
          },
          "end": "(?i)end\\s+ref",
          "endCaptures": {
            "0": {
              "name": "keyword.other.sequence.ref.source.plantuml"
            }
          },
          "patterns": [
            {
              "name": "meta.comment.sequence.ref.source.plantuml",
              "match": ".+?"
            }
          ]
        },
        {
          "comment": "delay",
          "match": "(?i)^\\s*(\\.{3,})\\s*(.+)\\s*(\\.{3,})\\s*$",
          "captures": {
            "1": {
              "name": "keyword.operator.sequence.delay.source.plantuml"
            },
            "2": {
              "name": "meta.comment.sequence.delay.source.plantuml"
            },
            "3": {
              "name": "keyword.operator.sequence.delay.source.plantuml"
            }
          }
        },
        {
          "comment": "space",
          "match": "(?i)(\\|{2,})(\\d+)?(\\|{1,})",
          "captures": {
            "1": {
              "name": "keyword.operator.sequence.space.source.plantuml"
            },
            "2": {
              "name": "constant.numeric.sequence.space.source.plantuml"
            },
            "3": {
              "name": "keyword.operator.sequence.space.source.plantuml"
            }
          }
        }
      ]
    },
    "State": {
      "patterns": [
        {
          "comment": "concurrent",
          "match": "(?i)^\\s*(-{2,})\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.state.concurrent.source.plantuml"
            }
          }
        }
      ]
    },
    "Object": {
      "patterns": [
        {
          "comment": "add object fields",
          "match": "(?i)^\\s*([\\w\\d_]+)\\s+:\\s+s*$",
          "captures": {
            "1": {
              "name": "support.variable.object.addfields.source.plantuml"
            },
            "2": {
              "name": "meta.comment.object.addfields.source.plantuml"
            }
          }
        }
      ]
    },
    "Class": {
      "patterns": [
        {
          "comment": "class group & enum",
          "begin": "(?i)^\\s*(enum|abstract|class|abstract\\s+class)\\s+([\\w\\d_\\.]+|\"[^\"]+\")(\\s*(<<.+?>>))?(\\s+(as)\\s+([\\w\\d_\\.]+|\"[^\"]+\")(\\s*(<<.+?>>))?)?(\\s+#(([\\w\\|\\\\\\/\\-]+)))?\\s*\\{\\s*$",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.class.group.source.plantuml"
            },
            "2": {
              "name": "support.variable.class.group.source.plantuml"
            },
            "4": {
              "name": "string.quoted.double.class.definition.source.plantuml"
            },
            "6": {
              "name": "keyword.other.class.group.source.plantuml"
            },
            "7": {
              "name": "support.variable.class.group.source.plantuml"
            },
            "9": {
              "name": "string.quoted.double.class.definition.source.plantuml"
            },
            "10": {
              "name": "constant.numeric.class.definition.source.plantuml"
            }
          },
          "end": "^\\s*(?<!\\\\)\\}\\s*$",
          "patterns": [
            {
              "comment": "body separator",
              "match": "(?i)^\\s*([.=_-]{2,})\\s*((.+?)\\s*([.=_-]{2,}))?",
              "captures": {
                "1": {
                  "name": "meta.comment.class.group.separator.source.plantuml"
                },
                "3": {
                  "name": "string.quoted.double.class.group.separator.source.plantuml"
                },
                "4": {
                  "name": "meta.comment.class.group.separator.source.plantuml"
                }
              }
            },
            {
              "comment": "function",
              "match": "(?i)^\\s*(\\s*\\{(static|abstract)\\}\\s*)?(\\s*[~#+-]\\s*)?(([\\p{L}0-9_]+(\\[\\])?\\s+)?([\\p{L}0-9_]+)(\\(\\))|([\\p{L}0-9_]+)(\\(\\))\\s*:\\s*([\\p{L}0-9_]+)?)\\s*$",
              "captures": {
                "1": {
                  "name": "storage.modifier.class.function.source.plantuml"
                },
                "3": {
                  "name": "keyword.other.class.function.source.plantuml"
                },
                "5": {
                  "name": "support.type.class.function.source.plantuml"
                },
                "7": {
                  "name": "support.variable.class.function.source.plantuml"
                },
                "9": {
                  "name": "support.variable.class.function.source.plantuml"
                },
                "11": {
                  "name": "support.type.class.function.source.plantuml"
                }
              }
            },
            {
              "comment": "fields",
              "match": "(?i)^\\s*(\\s*\\{(static|abstract)\\}\\s*)?(\\s*[~#+-]\\s*)?(([\\p{L}0-9_]+(\\[\\])?\\s+)?([\\p{L}0-9_]+)|([\\p{L}0-9_]+)\\s*:\\s*(\\w+)?)\\s*$",
              "captures": {
                "1": {
                  "name": "storage.modifier.class.fields.source.plantuml"
                },
                "3": {
                  "name": "keyword.other.class.fields.source.plantuml"
                },
                "5": {
                  "name": "support.type.class.fields.source.plantuml"
                },
                "7": {
                  "name": "support.variable.class.fields.source.plantuml"
                },
                "8": {
                  "name": "support.variable.class.fields.source.plantuml"
                },
                "9": {
                  "name": "support.type.class.fields.source.plantuml"
                }
              }
            },
            {
              "comment": "other fields/function",
              "match": "(?i)^\\s*(\\s*\\{(static|abstract)\\}\\s*)?(\\s*[~#+-]\\s*)?(.+?)\\s*$",
              "captures": {
                "1": {
                  "name": "storage.modifier.class.fields.source.plantuml"
                },
                "3": {
                  "name": "keyword.other.class.fields.source.plantuml"
                },
                "4": {
                  "name": "string.quoted.double.class.other.source.plantuml"
                }
              }
            }
          ]
        },
        {
          "comment": "hide & show",
          "match": "(?i)^\\s*(hide|show)\\s+(([\\w\\d_\\.]+|\"[^\"]+\")|<<.+?>>|Stereotypes|class|interface|enum)(\\s+(empty fields|empty methods|fields|attributes|methods|members|circle))?\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.class.hideshow.source.plantuml"
            },
            "2": {
              "name": "support.variable.class.hideshow.source.plantuml"
            },
            "5": {
              "name": "constant.numeric.class.hideshow.source.plantuml"
            }
          }
        }
      ]
    }
  }
}
